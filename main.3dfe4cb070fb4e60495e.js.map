{"version":3,"sources":["webpack:///./js/Slider.js","webpack:///./js/fetch.js","webpack:///./js/newSlider.js"],"names":["Slider","slideWidth","slidesToShow","parent","imgPromise","renderLoading","handleImages","images","renderSlider","createRefs","addStyles","sliderLength","slider","children","length","addListeners","catch","innerHTML","createError","Array","isArray","elements","image","push","join","btns","document","querySelector","style","width","slidesToShowWidth","cssText","offset","left","addEventListener","event","target","id","moveLeft","moveRigth","this","fetchImg","fetch","then","res","json","map","item","urls","small","console","log","window","body","createMarkup"],"mappings":"ohDAqGeA,EApGb,SAAYC,EAAoCC,EAAcC,EAAQC,GAA0D,4DAYjH,0GACb,EAAKC,gBADQ,SAEQ,EAAKC,eAFb,OAEPC,EAFO,OAGb,EAAKC,aAAaD,GAClB,EAAKE,aACL,EAAKC,YACL,EAAKC,aAAe,EAAKC,OAAOC,SAASC,OACzC,EAAKC,eAPQ,4CAZiH,sBAsBlH,WACZ,+FAvB8H,uBA0BjH,WACb,OAAO,EAAKX,WAAWY,OAAM,kBAAM,EAAKb,OAAOc,UAAY,EAAKC,oBA3B8D,uBA8BjH,SAACX,GACd,GAAGY,MAAMC,QAAQb,GAAS,CAExB,IADA,IACA,EADMc,EAAW,GACjB,IAAkBd,KAAlB,aAA0B,KAAjBe,EAAiB,QACxBD,EAASE,KAAT,sCACwCD,EADxC,qBAIF,EAAKnB,OAAOc,UAAZ,qMAGqCI,EAASG,KAAK,IAHnD,oYAtC4H,qBAoDnH,WACX,EAAKC,KAAOC,SAASC,cAAc,SACnC,EAAKf,OAASc,SAASC,cAAc,oBAtDyF,oBAyDpH,WACVD,SAASC,cAAc,iBAAiBC,MAAMC,MAAW,EAAKC,kBAA9D,KACAJ,SAASC,cAAc,WAAWC,MAAMG,QAAxC,UAAqF,IAAzB,EAAKD,kBAAjE,QA3D8H,wBA8DhH,WACd,EAAK3B,OAAOc,UAAY,0CA/DsG,mBAmErH,WACL,EAAKe,OAAS,IAChB,EAAKA,QACF,EAAK/B,WAAa,EAAKU,aAAe,EAAKmB,mBAEhD,EAAKlB,OAAOgB,MAAMK,KAAU,EAAKD,OAAjC,QAxE8H,oBA2EpH,WAER,EAAKA,QACJ,EAAK/B,WAAa,EAAKU,aAAe,EAAKmB,oBAE5C,EAAKE,OAAS,GAEhB,EAAKpB,OAAOgB,MAAMK,KAAU,EAAKD,OAAjC,QAlF8H,uBAqFjH,WACb,EAAKP,KAAKS,iBAAiB,SAAS,SAACC,GACX,SAApBA,EAAMC,OAAOC,IACf,EAAKL,QAAU,EAAK/B,WACpB,EAAKqC,YACwB,SAApBH,EAAMC,OAAOC,KACtB,EAAKL,QAAU,EAAK/B,WACpB,EAAKsC,mBA3FTC,KAAKvC,WAAaA,EAClBuC,KAAKR,OAAS,EACdQ,KAAKrC,OAASA,EACdqC,KAAKpC,WAAaA,EAClBoC,KAAK7B,aAAe,KACpB6B,KAAKtC,aAAeA,EACpBsC,KAAKV,kBAAoBU,KAAKvC,WAAauC,KAAKtC,aAChDsC,KAAKf,KAAO,KACZe,KAAK5B,OAAS,M,6ICRlB,IAQe6B,EARD,e,EAAA,G,EAAA,yBAAG,mHAEMC,MAAM,gGACxBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIA,EAAIE,KAAI,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAJ1B,cAET1C,EAFS,yBAKU,KAAlBA,EAAOO,OAAgBP,EAAS2C,QAAQC,IAAI,yBALpC,0C,+KAAH,qDCECC,OAAOlB,iBAAiB,oBAAoB,WACvD,IAEMmB,EAAO3B,SAASC,cAAc,QAElB,IAAI3B,EAJH,IACA,EAGoCqD,EAAMZ,KACnDa,oB","file":"main.3dfe4cb070fb4e60495e.js","sourcesContent":["class Slider {\n  constructor(slideWidth /*number without \"px\"*/, slidesToShow, parent, imgPromise/* recieved array wich contains urls, async */) {\n    this.slideWidth = slideWidth;\n    this.offset = 0;\n    this.parent = parent;\n    this.imgPromise = imgPromise;\n    this.sliderLength = null;\n    this.slidesToShow = slidesToShow;\n    this.slidesToShowWidth = this.slideWidth * this.slidesToShow;\n    this.btns = null;\n    this.slider = null;\n  }\n\n  createMarkup = async () => {\n    this.renderLoading();\n    const images = await this.handleImages();\n    this.renderSlider(images);\n    this.createRefs();\n    this.addStyles(); //basic styles\n    this.sliderLength = this.slider.children.length;\n    this.addListeners();\n  };\n\n  createError = () => {\n    return `<div class='error'>OOOPS!!!<br>We are so sorry...<br> Something went wrong...</div>`\n  }\n\n  handleImages = () => {\n    return this.imgPromise.catch(() => this.parent.innerHTML = this.createError())\n  }\n\n  renderSlider = (images) => {\n    if(Array.isArray(images)) {\n      const elements = [];\n      for (let image of images) {\n        elements.push(\n          `<li class=\"slider__item\"><img src=\"${image}\" alt=\"img\"></li>`\n        );\n      }\n      this.parent.innerHTML = `<div class=\"slider\">\n                                    <div class=\"slider__line\">\n                                        <ul class=\"slider__list\">\n                                         ${elements.join(\"\")}\n                                        </ul>\n                                    </div>\n                                    <div class=\"btns\">\n                                        <a class=\"btn\" id=\"prev\">prev</a>\n                                        <a class=\"btn\" id=\"next\">next</a>\n                                    </div>\n                                </div>`;\n    }\n  }\n\n  createRefs = () => {\n    this.btns = document.querySelector(\".btns\");\n    this.slider = document.querySelector(\".slider__list\");\n  }\n\n  addStyles = () => {\n    document.querySelector(\".slider__line\").style.width = `${this.slidesToShowWidth}px`;\n    document.querySelector(\".slider\").style.cssText = `width: ${this.slidesToShowWidth * 1.1}px`;\n  }\n\n  renderLoading = () => {\n    this.parent.innerHTML = '<div class=\"loader\">Loading...</div>';\n  }\n\n\n  moveLeft = () => {\n    if (this.offset > 0) {\n      this.offset =\n        -this.slideWidth * this.sliderLength + this.slidesToShowWidth;\n    }\n    this.slider.style.left = `${this.offset}px`;\n  };\n\n  moveRigth = () => {\n    if (\n      this.offset <\n      -this.slideWidth * this.sliderLength + this.slidesToShowWidth\n    ) {\n      this.offset = 0;\n    }\n    this.slider.style.left = `${this.offset}px`;\n  };\n\n  addListeners = () => {\n    this.btns.addEventListener(\"click\", (event) => {\n      if (event.target.id === \"prev\") {\n        this.offset += this.slideWidth;\n        this.moveLeft();\n      } else if (event.target.id === \"next\") {\n        this.offset -= this.slideWidth;\n        this.moveRigth();\n      }\n    });\n  };\n}\n\n\n\nexport default Slider;\n\n\n","import APIKEY from './apikey';\n\nconst fetchImg = async () => {\n  let URI = 'https://api.unsplash.com/photos?page=1&client_id=';\n  const images = await fetch(`${URI}${APIKEY}`)\n    .then(res => res.json())\n    .then(res => res.map(item => item.urls.small));\n  return images.length === 10 ? images : console.log('Something went wrong');\n};\n\nexport default fetchImg;","import Slider from './Slider';\nimport fetchImg from './fetch';\n\n\nexport default window.addEventListener(\"DOMContentLoaded\", () => {\n    const slideWidth = 200;\n    let slidesToShow = 3;\n    const body = document.querySelector(\"body\");\n  \n    const newSlider = new Slider(slideWidth, slidesToShow, body, fetchImg());\n    newSlider.createMarkup();\n  });"],"sourceRoot":""}